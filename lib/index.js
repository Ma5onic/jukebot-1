// Generated by CoffeeScript 1.9.2
(function() {
  var Slack, SpotifyWebApi, app, bodyParser, dotenv, express, slack, spotifyApi;

  express = require('express');

  bodyParser = require('body-parser');

  dotenv = require('dotenv');

  SpotifyWebApi = require('spotify-web-api-node');

  Slack = require('slack-node');

  dotenv.load();

  spotifyApi = new SpotifyWebApi({
    clientId: process.env.SPOTIFY_KEY,
    clientSecret: process.env.SPOTIFY_SECRET,
    redirectUri: process.env.SPOTIFY_REDIRECT_URI
  });

  slack = new Slack();

  slack.setWebhook(process.env.SLACK_WEBHOOK_URL);

  app = express();

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.get('/', function(req, res) {
    if (spotifyApi.getAccessToken()) {
      return res.send('You are logged in.');
    } else {
      return res.send('<a href="authorize">Authorize Spotify Account</a>');
    }
  });

  app.get('/authorize', function(req, res) {
    var authorizeURL, scopes, state;
    scopes = ['playlist-modify-public', 'playlist-modify-private'];
    state = new Date().getTime();
    authorizeURL = spotifyApi.createAuthorizeURL(scopes, state);
    return res.redirect(authorizeURL);
  });

  app.get('/callback', function(req, res) {
    return spotifyApi.authorizationCodeGrant(req.query.code).then(function(data) {
      spotifyApi.setAccessToken(data.body['access_token']);
      spotifyApi.setRefreshToken(data.body['refresh_token']);
      return res.redirect('/');
    }, function(err) {
      return res.send(err);
    });
  });

  app.use('/store', function(req, res, next) {
    if (req.body.token !== process.env.SLACK_TOKEN) {
      res.status(500).send('Access forbidden.');
    }
    return next();
  });

  app.post('/store', function(req, res) {
    return spotifyApi.refreshAccessToken().then(function(data) {
      return spotifyApi.searchTracks(req.body.text).then(function(data) {
        var results, track;
        results = data.body.track.items;
        if (results.length === 0) {
          return res.send('Could not find that track.');
        }
        track = results[0];
        return spotifyApi.addTracksToPlaylist(process.env.SPOTIFY_USERNAME, process.env.SPOTIFY_PLAYLIST_ID, ["spotify:track:" + track.id]).then(function(data) {
          var artistName, trackName;
          artistName = track.artists[0].name;
          trackName = track.name;
          slack.webhook({
            channel: '#jaystu_sandbox',
            username: 'jukebot',
            text: "Track " + trackName + " by " + artistName + " was added to playlist."
          }, function(err, response) {
            return console.log(response);
          });
          return console.log("Track added.");
        }, function(err) {
          return res.send(err.message);
        }, function(err) {
          return res.send(err.message);
        });
      }, function(err) {
        return res.send(err.message);
      });
    });
  });

  app.set('port', process.env.PORT || 5000);

  app.listen(app.get('port'));

}).call(this);
